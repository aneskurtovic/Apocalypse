// <auto-generated />
using Festival.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace Festival.Data.Migrations
{
    [DbContext(typeof(FestivalContext))]
    [Migration("20191128164214_festival")]
    partial class festival
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ClassLibrary.Models.Accommodation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("distance")
                        .HasColumnType("real");

                    b.Property<string>("imgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Accommodation");
                });

            modelBuilder.Entity("ClassLibrary.Models.Attendee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("accountID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("accountID");

                    b.ToTable("Attendee");
                });

            modelBuilder.Entity("ClassLibrary.Models.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("ClassLibrary.Models.Performance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("performerID")
                        .HasColumnType("int");

                    b.Property<int?>("stageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("start")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("performerID");

                    b.HasIndex("stageID");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("ClassLibrary.Models.Performer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("fee")
                        .HasColumnType("real");

                    b.Property<string>("imgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("managerID")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("promoText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("managerID");

                    b.ToTable("Performer");
                });

            modelBuilder.Entity("ClassLibrary.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("attendeeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("attendeeID");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("ClassLibrary.Models.ShopItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PurchaseID")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("ShopItem");
                });

            modelBuilder.Entity("ClassLibrary.Models.SocialMediaLink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PerformerID")
                        .HasColumnType("int");

                    b.Property<string>("link")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PerformerID");

                    b.ToTable("SocialMediaLink");
                });

            modelBuilder.Entity("ClassLibrary.Models.Sponsor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("logoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("ClassLibrary.Models.Stage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("sponsorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("sponsorID");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("ClassLibrary.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("attendeeID")
                        .HasColumnType("int");

                    b.Property<int?>("typeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("attendeeID");

                    b.HasIndex("typeID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("ClassLibrary.Models.TicketType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("TicketType");
                });

            modelBuilder.Entity("ClassLibrary.Models.TransferReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("attendeeID")
                        .HasColumnType("int");

                    b.Property<int?>("transferServiceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("attendeeID");

                    b.HasIndex("transferServiceID");

                    b.ToTable("TransferReservation");
                });

            modelBuilder.Entity("ClassLibrary.Models.TransferService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("numberOfAvailableSeats")
                        .HasColumnType("int");

                    b.Property<int?>("transferVehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("transferVehicleID");

                    b.ToTable("TransferService");
                });

            modelBuilder.Entity("ClassLibrary.Models.TransferVehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<string>("registrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TransferVehicle");
                });

            modelBuilder.Entity("ClassLibrary.Models.UserAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("ClassLibrary.Models.Voucher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("saleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Voucher");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Voucher");
                });

            modelBuilder.Entity("ClassLibrary.Models.PurchaseVoucher", b =>
                {
                    b.HasBaseType("ClassLibrary.Models.Voucher");

                    b.Property<int>("purchaseID")
                        .HasColumnType("int");

                    b.HasIndex("purchaseID")
                        .IsUnique()
                        .HasFilter("[purchaseID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("PurchaseVoucher");
                });

            modelBuilder.Entity("ClassLibrary.Models.TicketVoucher", b =>
                {
                    b.HasBaseType("ClassLibrary.Models.Voucher");

                    b.Property<int>("ticketID")
                        .HasColumnType("int");

                    b.HasIndex("ticketID")
                        .IsUnique()
                        .HasFilter("[ticketID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("TicketVoucher");
                });

            modelBuilder.Entity("ClassLibrary.Models.Attendee", b =>
                {
                    b.HasOne("ClassLibrary.Models.UserAccount", "account")
                        .WithMany()
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.Performance", b =>
                {
                    b.HasOne("ClassLibrary.Models.Performer", "performer")
                        .WithMany()
                        .HasForeignKey("performerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassLibrary.Models.Stage", "stage")
                        .WithMany()
                        .HasForeignKey("stageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.Performer", b =>
                {
                    b.HasOne("ClassLibrary.Models.Manager", "manager")
                        .WithMany()
                        .HasForeignKey("managerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.Purchase", b =>
                {
                    b.HasOne("ClassLibrary.Models.Attendee", "attendee")
                        .WithMany()
                        .HasForeignKey("attendeeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.ShopItem", b =>
                {
                    b.HasOne("ClassLibrary.Models.Purchase", null)
                        .WithMany("items")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.SocialMediaLink", b =>
                {
                    b.HasOne("ClassLibrary.Models.Performer", null)
                        .WithMany("socialMediaLinks")
                        .HasForeignKey("PerformerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.Stage", b =>
                {
                    b.HasOne("ClassLibrary.Models.Sponsor", "sponsor")
                        .WithMany()
                        .HasForeignKey("sponsorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.Ticket", b =>
                {
                    b.HasOne("ClassLibrary.Models.Attendee", "attendee")
                        .WithMany()
                        .HasForeignKey("attendeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassLibrary.Models.TicketType", "type")
                        .WithMany()
                        .HasForeignKey("typeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.TransferReservation", b =>
                {
                    b.HasOne("ClassLibrary.Models.Attendee", "attendee")
                        .WithMany()
                        .HasForeignKey("attendeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ClassLibrary.Models.TransferService", "transferService")
                        .WithMany()
                        .HasForeignKey("transferServiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ClassLibrary.Models.TransferService", b =>
                {
                    b.HasOne("ClassLibrary.Models.TransferVehicle", "transferVehicle")
                        .WithMany()
                        .HasForeignKey("transferVehicleID")
                        .OnDelete(DeleteBehavior.Cascade);

                });

            modelBuilder.Entity("ClassLibrary.Models.PurchaseVoucher", b =>
                {
                    b.HasOne("ClassLibrary.Models.Purchase", "purchase")
                        .WithOne("purchaseVoucher")
                        .HasForeignKey("ClassLibrary.Models.PurchaseVoucher", "purchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassLibrary.Models.TicketVoucher", b =>
                {
                    b.HasOne("ClassLibrary.Models.Ticket", "ticket")
                        .WithOne("ticketVoucher")
                        .HasForeignKey("ClassLibrary.Models.TicketVoucher", "ticketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
