// <auto-generated />
using System;
using Festival.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Festival.Data.Migrations
{
    [DbContext(typeof(FestivalContext))]
    [Migration("20200426221125_Driver for Transfer Vehicle")]
    partial class DriverforTransferVehicle
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Festival.Data.Models.Accommodation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<float>("Distance")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Accommodation");
                });

            modelBuilder.Entity("Festival.Data.Models.Attendee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserAccountID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("Attendee");
                });

            modelBuilder.Entity("Festival.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Festival.Data.Models.Manager", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("Festival.Data.Models.Performance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PerformerID")
                        .HasColumnType("int");

                    b.Property<int?>("StageID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PerformerID");

                    b.HasIndex("StageID");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("Festival.Data.Models.Performer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Fee")
                        .HasColumnType("real");

                    b.Property<int?>("ImageID")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PromoText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.HasIndex("ManagerID");

                    b.ToTable("Performer");
                });

            modelBuilder.Entity("Festival.Data.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttendeeID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseVoucherID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttendeeID");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("Festival.Data.Models.ShopItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("PurchaseID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("ShopItem");
                });

            modelBuilder.Entity("Festival.Data.Models.Sponsor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("Festival.Data.Models.Stage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SponsorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SponsorID");

                    b.ToTable("Stage");
                });

            modelBuilder.Entity("Festival.Data.Models.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttendeeID")
                        .HasColumnType("int");

                    b.Property<int?>("TicketTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("TicketVoucherID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttendeeID");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Festival.Data.Models.TicketType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("TicketType");
                });

            modelBuilder.Entity("Festival.Data.Models.TransferReservation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttendeeID")
                        .HasColumnType("int");

                    b.Property<int?>("TransferServiceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AttendeeID");

                    b.HasIndex("TransferServiceID");

                    b.ToTable("TransferReservation");
                });

            modelBuilder.Entity("Festival.Data.Models.TransferService", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfAvailableSeats")
                        .HasColumnType("int");

                    b.Property<int?>("TransferVehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("TransferVehicleID");

                    b.ToTable("TransferService");
                });

            modelBuilder.Entity("Festival.Data.Models.TransferVehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.HasKey("ID");

                    b.ToTable("TransferVehicle");
                });

            modelBuilder.Entity("Festival.Data.Models.UserAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("Festival.Data.Models.Voucher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Voucher");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Voucher");
                });

            modelBuilder.Entity("Festival.Data.Models.PurchaseVoucher", b =>
                {
                    b.HasBaseType("Festival.Data.Models.Voucher");

                    b.Property<int?>("PurchaseID")
                        .HasColumnType("int");

                    b.HasIndex("PurchaseID")
                        .IsUnique()
                        .HasFilter("[PurchaseID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("PurchaseVoucher");
                });

            modelBuilder.Entity("Festival.Data.Models.TicketVoucher", b =>
                {
                    b.HasBaseType("Festival.Data.Models.Voucher");

                    b.Property<int?>("TicketID")
                        .HasColumnType("int");

                    b.HasIndex("TicketID")
                        .IsUnique()
                        .HasFilter("[TicketID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("TicketVoucher");
                });

            modelBuilder.Entity("Festival.Data.Models.Attendee", b =>
                {
                    b.HasOne("Festival.Data.Models.UserAccount", "Account")
                        .WithMany()
                        .HasForeignKey("UserAccountID");
                });

            modelBuilder.Entity("Festival.Data.Models.Performance", b =>
                {
                    b.HasOne("Festival.Data.Models.Performer", "Performer")
                        .WithMany()
                        .HasForeignKey("PerformerID");

                    b.HasOne("Festival.Data.Models.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageID");
                });

            modelBuilder.Entity("Festival.Data.Models.Performer", b =>
                {
                    b.HasOne("Festival.Data.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");

                    b.HasOne("Festival.Data.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID");
                });

            modelBuilder.Entity("Festival.Data.Models.Purchase", b =>
                {
                    b.HasOne("Festival.Data.Models.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeID");
                });

            modelBuilder.Entity("Festival.Data.Models.ShopItem", b =>
                {
                    b.HasOne("Festival.Data.Models.Purchase", null)
                        .WithMany("Items")
                        .HasForeignKey("PurchaseID");
                });

            modelBuilder.Entity("Festival.Data.Models.Sponsor", b =>
                {
                    b.HasOne("Festival.Data.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");
                });

            modelBuilder.Entity("Festival.Data.Models.Stage", b =>
                {
                    b.HasOne("Festival.Data.Models.Sponsor", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorID");
                });

            modelBuilder.Entity("Festival.Data.Models.Ticket", b =>
                {
                    b.HasOne("Festival.Data.Models.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeID");

                    b.HasOne("Festival.Data.Models.TicketType", "Type")
                        .WithMany()
                        .HasForeignKey("TicketTypeID");
                });

            modelBuilder.Entity("Festival.Data.Models.TransferReservation", b =>
                {
                    b.HasOne("Festival.Data.Models.Attendee", "Attendee")
                        .WithMany()
                        .HasForeignKey("AttendeeID");

                    b.HasOne("Festival.Data.Models.TransferService", "TransferService")
                        .WithMany()
                        .HasForeignKey("TransferServiceID");
                });

            modelBuilder.Entity("Festival.Data.Models.TransferService", b =>
                {
                    b.HasOne("Festival.Data.Models.TransferVehicle", "TransferVehicle")
                        .WithMany()
                        .HasForeignKey("TransferVehicleID");
                });

            modelBuilder.Entity("Festival.Data.Models.PurchaseVoucher", b =>
                {
                    b.HasOne("Festival.Data.Models.Purchase", "Purchase")
                        .WithOne("PurchaseVoucher")
                        .HasForeignKey("Festival.Data.Models.PurchaseVoucher", "PurchaseID");
                });

            modelBuilder.Entity("Festival.Data.Models.TicketVoucher", b =>
                {
                    b.HasOne("Festival.Data.Models.Ticket", "Ticket")
                        .WithOne("TicketVoucher")
                        .HasForeignKey("Festival.Data.Models.TicketVoucher", "TicketID");
                });
#pragma warning restore 612, 618
        }
    }
}
